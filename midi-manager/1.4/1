using System;
using System.Collections;
using System.IO;
using System.Text;
using System.ComponentModel;

namespace midiManager
{
class Program
{static void Main(string[] args)
{
	Midi myMidi = new Midi();
	myMidi.start();
}}

enum KANAL { C9 = 184, C10, C11, C12, C13, C14, C15, C16 }

class  Midi
{


// midi erstes datenbyte

public int   midiBankwechsel      = 192;  
public int[] midiNotes = new int[17] { 0, 144, 145, 146, 147, 
		                                  148, 149, 150, 151, 
										  152, 153, 154, 155, 
										  156, 157, 158, 159 };






// devices und steuerungsvariablen

private     MIDIOXLib.MoxScriptClass mox = new MIDIOXLib.MoxScriptClass();
private     CGuru guru;
private     CGuru guruA;
private     CGuru guruB;
public int  liDEV;
private     DEV leDEV;
private     DEV riDev;

public int  A_1_2 = 0;                     
public int  B_1_2 = 0;                   
public int  A_1_port = 0;
public int  B_1_port = 0;
private int lastOne = 0;
private int activeSendEfx = 0;
private int sendIsActiveLinks = 0;
private int sendIsActiveRechts = 0;
public int  recInstrument = -1;       // traeger des record focus     
public int  shiftPads = 0;            //alternative pad funktion auswahl;  
public int  shiftScenes = 0;          //alternative scenes anwahl

// KANAL 16 - CTRL befehle _________________________________________

public int[] CTRLswitchINS            = new int[4] { 96, 97, 98, 99 }; 
public int[] CTRLswitchEFX            = new int[4]{ 104, 105, 106, 107 };    
public int   CTRLswitchSENDLinks      = 100;                   
public int   CTRLswitchSENDRechts     = 108;                  
public int   CTRLswitchBank           = 109;                      
public int[] CTRLswitchEFXout         = new int[4] { 7, 15, 7, 116 };  
public int[] CTRLswitchSENDs          = new int[4] { 112, 113, 114, 115 }; 
public int[] CTRLswitchRecord         = new int[4] { 119, 120, 121, 121 };           
public int   CTRLswitchMASTER         = 116;     






public void toggleOFF(int device, int chan, int data)
{
	mox.OutputMidiMsg(device, chan, data, 127);
	mox.OutputMidiMsg(device, chan, data, 0);
}



public int get(StreamReader re)
{
	return Convert.ToInt16(re.ReadLine().Split(':')[1]);
}

public void readConfigFile()
{
	try
	{
		StreamReader re = File.OpenText(".\\devices.txt");
		int puffer          = get(re);
		leDEV.init(           puffer); 
		guruA.init(           puffer); 
		guruB.init(           puffer);
		riDev.init(           get(re) );
		liDEV               = get(re);
		CTRLswitchEFXout[0] = get(re);
		CTRLswitchEFXout[1] = get(re);
		CTRLswitchEFXout[2] = get(re);
		CTRLswitchEFXout[3] = get(re);
		A_1_port            = get(re);
		B_1_port            = get(re);
		re.Close();	
		Console.WriteLine("gelesen");
	}
	catch (Exception exc)
	{   
		Console.WriteLine("fehler");
	}
}



public void start()
{
	mox.MidiInput += new MIDIOXLib._IMoxScriptEvents_MidiInputEventHandler(this.midiIn);
	guruA = new CGuru(mox, 4, ".\\guruA.txt");
	guruB = new CGuru(mox, 5, ".\\guruB.txt");
	leDEV = new DEV(mox);
	riDev = new DEV(mox);
	guru = guruA;
	
	leDEV.addPAGE(24, (int)KANAL.C11, 0);    // INSTRUMENT1
	leDEV.addPAGE(25, (int)KANAL.C11, 32);   // INSTRUMENT2
	leDEV.addPAGE(26, (int)KANAL.C11, 64);   // INSTRUMENT3
	leDEV.addPAGE(27, (int)KANAL.C11, 96);   // INSTRUMENT4
	leDEV.addPAGE(28, (int)KANAL.C9, 0);     // SENDEFX1
	leDEV.addPAGE(29, (int)KANAL.C9, 32);    // SENDEFX2
	leDEV.addPAGE(30, (int)KANAL.C9, 64);    // SENDEFX3
	leDEV.addPAGE(31, (int)KANAL.C13, 32);   // SENDS MIXER1
	leDEV.addMIXER(   (int)KANAL.C13);       //   
 	riDev.addPAGE(0,  (int)KANAL.C10, 0);    // EFX1
	riDev.addPAGE(1,  (int)KANAL.C10, 32);   // EFX2
	riDev.addPAGE(2,  (int)KANAL.C10, 64);   // EFX3
	riDev.addPAGE(3,  (int)KANAL.C10, 96);   // EFX4
	riDev.addPAGE(4,  (int)KANAL.C14, 32);   // SENDS MIXER2
	riDev.addPAGE(4,  (int)KANAL.C15, 32);   // SENDS MIXER3
	riDev.addPAGE(5,  (int)KANAL.C9, 0);     // SENDEFX1
	riDev.addPAGE(6,  (int)KANAL.C9, 32);    // SENDEFX2
	riDev.addPAGE(7,  (int)KANAL.C9, 64);    // SENDEFX3
	riDev.addMIXER(   (int)KANAL.C14);
	riDev.addMIXER(   (int)KANAL.C15);

	//main----------------
	readConfigFile();
	mox.FireMidiInput=1;
	mox.DivertMidiInput=0;
	Console.ReadLine();
	mox.FireMidiInput=0;
	//main----------------
}


private void writeRecordFocus(int number)
{
	if (number != recInstrument) 
	{
		if (number != -1) toggleOFF(liDEV, (int)KANAL.C16, CTRLswitchRecord[0] + recInstrument);
			recInstrument = number; 
		toggleOFF(liDEV,(int)KANAL.C16,CTRLswitchRecord[0]+ recInstrument);                 
	}   
}


private void midiIn(int ts, int port, int chan, int dat, int wert)
{
	switch (chan)
	{
	case 152: 
		if (dat == 24) shiftPads = 1; 
	break;
	case 136:
		//hier sind automatisch nur die note offs von der zoom
		//if (dat == 21)
		//{
		//	shiftPads = 0;//shiftPads funktion    
		//	shiftScenes = ((shiftScenes + 1) % 9) * 8; //shiftpads offset
		//}

		if ((dat >=12) && (dat<=19))
			toggleOFF(B_1_port + B_1_2, midiNotes[11], dat); 
		
		// if (dat == 22) guru.undoCommand();
		// if (dat == 23) guru.commitCommand(); 
		// if (dat == 20) guru.recordCommand(); 
		// if (dat == 12) guru.patternView();  
		// if (dat == 13) guru.graphEditView(); 
		// if (dat == 14) guru.padEditView(); 
		// if (dat == 15) guru.scenesView(); 
		// if (dat == 32) readConfigFile();
		// if (dat == 37) guru.load();
		// if (dat == 38) guru.save();
		
		if ((dat >= 20) && (dat <= 23)) 
				guru.switchMachine(dat - 20);
	break;
	case 144:
		//note vom keyboard für jeweils einen der beiden synthies
		mox.OutputMidiMsg(A_1_port + A_1_2, 144, dat, wert);
	break;
	case 159: 
		//kommt von der akai - noten
		mox.OutputMidiMsg(B_1_port + B_1_2, midiNotes[11], dat, wert);
		if (shiftPads == 1) toggleOFF(B_1_port + B_1_2, midiNotes[12], dat - 36 + 60);     
		if (dat >= 60) toggleOFF(B_1_port + B_1_2, midiNotes[15], dat + shiftScenes);
	break;
	case 175: 
		//kommt von der akai - aftertouch
		//mox.OutputMidiMsg(liDEV, 4 + A_1_2, midiNotes[11], wert);
	break;
	case (int)KANAL.C9: 
		leDEV.setPAGEParam(4 + (dat / 32), dat, wert);
		riDev.setPAGEParam(6 + (dat / 32), dat, wert);
	break;
	case (int)KANAL.C10: 
		riDev.setPAGEParam(0+(dat/32),dat,wert); 
	break;
	case (int)KANAL.C11: 
		leDEV.setPAGEParam(0+(dat/32),dat,wert); 
	break;
	case (int)KANAL.C13: 
		//mixer bank1
		if (dat < 32) leDEV.setMIXERParam(0, dat, wert);
		else leDEV.setPAGEParam(7, (dat), wert); 
	break; 
	case (int)KANAL.C14: 
		//mixer bank2
		if (dat<32) riDev.setMIXERParam(0, dat, wert); 
		else riDev.setPAGEParam(4,dat,wert);
	break; 
	case (int)KANAL.C15: 
		//mixer bank3
		if (dat<32) riDev.setMIXERParam(1, dat, wert); 
		else riDev.setPAGEParam(5,dat,wert);
	break;
	case 191: 
		//midiKanal 16
		if (wert == 0)//nur auf die off events vom toggleOff reagieren
		{
			if (dat == CTRLswitchBank)
			{
				riDev.switchMIXERBank();
				riDev.callPAGE(lastOne);
			}
			if (dat < 24) 
			{
				leDEV.callMIXER(dat);
				sendIsActiveLinks=0;
				sendIsActiveRechts=0;
			}
			if (dat == CTRLswitchSENDLinks) 
			{
				if (sendIsActiveLinks == 1) 
				{
					activeSendEfx = (activeSendEfx + 1) % 3;
				}
				sendIsActiveLinks=1;
				sendIsActiveRechts=0;
				leDEV.callPAGE(7);
				lastOne = 6 + activeSendEfx;
				riDev.callPAGE(lastOne);
				toggleOFF(liDEV,(int)KANAL.C16,CTRLswitchSENDs[0] + activeSendEfx);
			}
			if (dat == CTRLswitchSENDRechts)
			{
				if (sendIsActiveRechts == 1) 
				{
					activeSendEfx = (activeSendEfx + 1) % 3;
				}
				sendIsActiveLinks=0;
				sendIsActiveRechts=1;
				leDEV.callPAGE(4 + activeSendEfx);
				lastOne = 4 + riDev.MIXERBank;
				riDev.callPAGE(lastOne);

				toggleOFF(liDEV, (int)KANAL.C16, CTRLswitchSENDs[0] + activeSendEfx);
			}		
			if ((dat >= CTRLswitchINS[0]) && (dat <= CTRLswitchINS[3])) 
			{
				int whichOne=dat - CTRLswitchINS[0];   
				writeRecordFocus(whichOne);
				leDEV.callPAGE(whichOne);
				sendIsActiveLinks=0;
				sendIsActiveRechts=0;

				if (dat == CTRLswitchINS[0])   B_1_2 = 0;      
				if (dat == CTRLswitchINS[1])   B_1_2 = 1;
				if (dat == CTRLswitchINS[2]) { A_1_2 = 0; guru = guruA; }
				if (dat == CTRLswitchINS[3]) { A_1_2 = 1; guru = guruB; }

			}
			if ((dat >= CTRLswitchEFX[0]) && (dat <= CTRLswitchEFX[3])){ 
				lastOne = dat - CTRLswitchEFX[0];
				riDev.callPAGE(lastOne);
				sendIsActiveLinks=0;
				sendIsActiveRechts=0;

				if (CTRLswitchEFXout[lastOne] != -1) 
				toggleOFF(liDEV, (int)KANAL.C16, CTRLswitchEFXout[lastOne]);
			}
		}
	break;
	default:
	break;
}}}}
